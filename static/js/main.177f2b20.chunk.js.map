{"version":3,"sources":["components/imgData.js","img/bunny.jpg","img/dolphin.jpg","img/duckling.jpg","img/hedgehog.jpg","img/kittens.jpg","img/puppies.jpg","img/red_panda.jpg","img/squirrel.jpg","components/GameboardContext.js","components/Nav.js","components/Card.js","components/Gameboard.js","App.js","index.js"],"names":["imgData","id","src","alt","GameBoardContext","createContext","GameBoardScoreContext","GameBoardBestScoreContext","GameboardProvider","props","useState","cards","setCards","score","setScore","best","setBest","Provider","value","children","Nav","useContext","showBest","Card","className","img","onClick","handleClick","GameBoard","clickedArr","setClickedArr","shuffle","i","length","j","Math","floor","random","useEffect","e","filteredCard","filter","card","target","prevArr","concat","includes","prevScore","map","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.177f2b20.chunk.js","sourcesContent":["import bunny from '../img/bunny.jpg';\r\nimport dolphin from \"../img/dolphin.jpg\";\r\nimport duckling from '../img/duckling.jpg';\r\nimport hedgehog from '../img/hedgehog.jpg';\r\nimport kittens from '../img/kittens.jpg';\r\nimport puppies from '../img/puppies.jpg';\r\nimport redPanda from '../img/red_panda.jpg';\r\nimport squirrel from '../img/squirrel.jpg';\r\n\r\nlet imgData = [\r\n    {\r\n        id: 1,\r\n        src: bunny, \r\n        alt: \"bunny\",\r\n    },\r\n    {\r\n        id: 2,\r\n        src: dolphin, \r\n        alt: \"dolphin\",\r\n    },\r\n    {\r\n        id: 3,\r\n        src: duckling, \r\n        alt: \"duckling\",\r\n    },\r\n    {\r\n        id: 4,\r\n        src: hedgehog, \r\n        alt: \"hedgehog\",\r\n    },\r\n    {\r\n        id: 5,\r\n        src: kittens, \r\n        alt: \"kittens\",\r\n    },\r\n    {\r\n        id: 6,\r\n        src: puppies, \r\n        alt: \"puppies\",\r\n    },\r\n    {\r\n        id: 7,\r\n        src: redPanda, \r\n        alt: \"red panda\",\r\n    },\r\n    {\r\n        id: 8,\r\n        src: squirrel, \r\n        alt: \"squirrel\",\r\n    },\r\n]\r\n\r\nexport {imgData};","export default __webpack_public_path__ + \"static/media/bunny.e62e9e40.jpg\";","export default __webpack_public_path__ + \"static/media/dolphin.1b7f2524.jpg\";","export default __webpack_public_path__ + \"static/media/duckling.3104d3ef.jpg\";","export default __webpack_public_path__ + \"static/media/hedgehog.8f60c11f.jpg\";","export default __webpack_public_path__ + \"static/media/kittens.21229a22.jpg\";","export default __webpack_public_path__ + \"static/media/puppies.6922394d.jpg\";","export default __webpack_public_path__ + \"static/media/red_panda.e903fb44.jpg\";","export default __webpack_public_path__ + \"static/media/squirrel.f5e9877f.jpg\";","import React, { useState, createContext } from 'react';\r\nimport { imgData } from './imgData';\r\n\r\nexport const GameBoardContext = createContext();\r\nexport const GameBoardScoreContext = createContext();\r\nexport const GameBoardBestScoreContext = createContext();\r\nexport const ClickedArrContext = createContext();\r\n\r\n\r\nexport function GameboardProvider(props){\r\n    const [ cards, setCards ] = useState(imgData);\r\n    const [ score, setScore ] = useState(0);\r\n    const [ best, setBest ] = useState(0);\r\n\r\n    return(\r\n        <GameBoardContext.Provider value={[cards, setCards]}>\r\n            <GameBoardScoreContext.Provider value={[score, setScore]}>\r\n                <GameBoardBestScoreContext.Provider value={[best, setBest]}>\r\n                    {props.children}\r\n                </GameBoardBestScoreContext.Provider>\r\n            </GameBoardScoreContext.Provider>\r\n        </GameBoardContext.Provider>\r\n    )\r\n\r\n}","import React, { useContext } from 'react';\r\nimport { GameBoardScoreContext, GameBoardBestScoreContext } from './GameboardContext';\r\nimport './Nav.css';\r\n\r\nexport default function Nav(){\r\n\r\n    const [score] = useContext(GameBoardScoreContext);\r\n    const [best, setBest] = useContext(GameBoardBestScoreContext);\r\n\r\n    function showBest(score){\r\n        if(score > best){\r\n            setBest(score);\r\n        }\r\n        return best;\r\n    }\r\n\r\n    return(\r\n        <nav>\r\n            <h1>Memory Game</h1>\r\n            <p>Score: {score} | Best: {showBest(score)} </p>\r\n        </nav>\r\n    )\r\n}","import React, { useContext, useState } from 'react';\r\nimport './Card.css';\r\n\r\nexport default function Card(props){\r\n    return(\r\n        <div className=\"card\" >\r\n            <img src={props.img.src} alt={props.img.alt} />\r\n            <div className=\"hover-div\" onClick={props.handleClick} id={props.img.id}></div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useContext, useState} from 'react';\r\nimport {imgData} from './imgData';\r\nimport Card from './Card';\r\nimport './Gameboard.css';\r\nimport { GameBoardContext, GameBoardScoreContext } from './GameboardContext';\r\n\r\nexport default function GameBoard(){\r\n    const [cards, setCards] = useContext(GameBoardContext);\r\n    const [score, setScore] = useContext(GameBoardScoreContext);\r\n    const [clickedArr, setClickedArr] = useState([]);\r\n\r\n    //ES6 ver. of Durstenfeld shuffle (optimized version of Fisher-Yates)\r\n    function shuffle(cards){\r\n        for (let i = cards.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [cards[i], cards[j]] = [cards[j], cards[i]];\r\n        }\r\n        return cards;\r\n    }\r\n\r\n    useEffect(() => {\r\n        // shuffle whenever score changes\r\n        setCards(shuffle(cards));\r\n    }, [score]);\r\n\r\n    const handleClick = (e) =>{\r\n        let filteredCard = cards.filter(card => card.id === +e.target.id);\r\n\r\n        setClickedArr(prevArr => prevArr.concat(filteredCard[0].id));\r\n        if(clickedArr.includes(+e.target.id)){\r\n            // reset if image was clicked before\r\n            setScore(0);\r\n            setClickedArr([]);\r\n            setCards(shuffle(cards));\r\n        }\r\n        else{\r\n            // continue\r\n            setScore(prevScore => prevScore + 1);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <main>\r\n            {\r\n                imgData.map(img => <Card img={img} key={img.id} handleClick={handleClick}/>)\r\n            }\r\n        </main>\r\n    )\r\n}","import './App.css';\nimport Nav from './components/Nav';\nimport GameBoard from './components/Gameboard';\nimport { GameboardProvider } from './components/GameboardContext';\n\nfunction App() {\n  return (\n    <GameboardProvider>\n      <div className=\"App\">\n        <Nav />\n        <GameBoard />\n      </div>\n    </GameboardProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}